{'scan_id': 'e7551f01-49c4-405e-8cca-83dd26a9fb92', 'ip_address': '76.76.21.22', 'url': 'gurjant.eu', 'port': 443, 'hidden': False, 'date': '2024-08-30T15: 15: 06', 'response_info': {'Age': {'value': '207211', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Cache-Control': {'value': 'public, max-age=0, must-revalidate', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Content-Disposition': {'value': 'inline', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Content-Encoding': {'value': 'gzip', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Content-Type': {'value': 'text/html; charset=utf-8', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Date': {'value': 'Fri,
      30 Aug 2024 15: 23: 00 GMT', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Server': {'value': 'Vercel', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Strict-Transport-Security': {'value': 'max-age=63072000', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Transfer-Encoding': {'value': 'chunked', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Vary': {'value': 'RSC, Next-Router-State-Tree, Next-Router-Prefetch', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'Access-Control-Allow-Origin': {'value': '*', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'X-Matched-Path': {'value': '/', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'X-Vercel-Cache': {'value': 'HIT', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }, 'X-Vercel-Id': {'value': 'cdg1: :kklkz-1725031380159-9e1427e56803', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'
    }
  }, 'response_found_headers': [
    {'header_field_name': 'Cache-Control', 'reference_url': 'https: //tools.ietf.org/html/rfc7234#section-8', 'description': 'Caches expose additional potential vulnerabilities, since the contents of the cache represent an attractive target for malicious exploitation.  Because cache contents persist after an HTTP request is complete, an attack on the cache can reveal information long after a user believes that the information has been removed from the network.  Therefore, cache contents need to be protected as sensitive information.', 'recommendation': 'Do not store unnecessarily sensitive information in the cache.', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'}, {'header_field_name': 'Content-Type', 'reference_url': 'https://tools.ietf.org/html/rfc7231#section-3.1.1.5', 'description': 'In practice, resource owners do not always properly configure their origin server to provide the correct Content-Type for a given representation, with the result that some clients will examine a payload\'s content and override the specified type. Clients that do so risk drawing incorrect conclusions, which might expose additional security risks (e.g., "privilege escalation").', 'recommendation': 'Properly configure their origin server to provide the correct Content-Type for a given representation.', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'}, {'header_field_name': 'Strict-Transport-Security', 'reference_url': 'https://tools.ietf.org/html/rfc6797', 'description': 'HTTP Strict Transport Security (HSTS) is a web security policy mechanism which helps to protect secure HTTPS websites against downgrade attacks and cookie hijacking. It allows web servers to declare that web browsers (or other complying user agents) should only interact with it using secure HTTPS connections, and never via the insecure HTTP protocol. HSTS is an IETF standards track protocol and is specified in RFC 6797.', 'recommendation': 'Please at least read this reference: https://www.owasp.org/index.php/HTTP_Strict_Transport_Security.', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'}, {'header_field_name': 'Transfer-Encoding', 'reference_url': 'https://tools.ietf.org/html/rfc7230#section-9', 'description': 'Response splitting (a.k.a, CRLF injection) is a common technique, used in various attacks on Web usage, that exploits the line-based nature of HTTP message framing and the ordered association of requests to responses on persistent connections. This technique can be particularly damaging when the requests pass through a shared cache.', 'recommendation': 'A common defense against response splitting is to filter requests for data that looks like encoded CR and LF (e.g., "%0D" and "%0A"). However, that assumes the application server is only performing URI decoding, rather than more obscure data transformations like charset transcoding, XML entity translation, base64 decoding, sprintf reformatting, etc. A more effective mitigation is to prevent anything other than the server\'s core protocol libraries from sending a CR or LF within the header section, which means restricting the output of header fields to APIs that filter for bad octets and not allowing application servers to write directly to the protocol stream.', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'}, {'header_field_name': 'Access-Control-Allow-Origin', 'reference_url': 'http://www.w3.org/TR/cors/#security', 'description': 'The Access-Control-Allow-Origin header indicates whether a resource can be shared based by returning the value of the Origin request header, "*", or "null" in the response.', 'recommendation': 'A GET response whose entity body happens to parse as ECMAScript can return an Access-Control-Allow-Origin header whose value is "*" provided there are no sensitive comments as it can be accessed cross-origin using an HTML script element. If needed, such resources can implement access control and CSRF protections as described above.', 'user_agent': 'Mozilla/5.0 (Linux; Android 11; SM-G9910) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Mobile Safari/537.36'}], 'response_missing_headers': [{'header_field_name': 'Pragma', 'reference_url': 'https://tools.ietf.org/html/rfc7234#section-8', 'description': 'Caches expose additional potential vulnerabilities, since the contents of the cache represent an attractive target for malicious exploitation.', 'recommendation': 'The "Pragma" header field allows backwards compatibility with HTTP/1.0 caches, so that clients can specify a "no-cache" request that they will understand (as Cache-Control was not defined until HTTP/1.1). When the Cache-Control header field is also present and understood in a request, Pragma is ignored. Define "Pragma: no-cache" whenever is possible.'}, {'header_field_name': 'Public-Key-Pins', 'reference_url': 'https://tools.ietf.org/html/rfc7469', 'description': 'HTTP Public Key Pinning (HPKP) is a trust on first use security mechanism which protects HTTPS websites from impersonation using fraudulent certificates issued by compromised certificate authorities. The security context or pinset data is supplied by the site or origin.', 'recommendation': 'Deploying Public Key Pinning (PKP) safely will require operational and organizational maturity due to the risk that hosts may make themselves unavailable by pinning to a set of SPKIs that becomes invalid. With care, host operators can greatly reduce the risk of man-in-the-middle (MITM) attacks and other false- authentication problems for their users without incurring undue risk. PKP is meant to be used together with HTTP Strict Transport Security (HSTS) [RFC6797], but it is possible to pin keys without requiring HSTS.'}, {'header_field_name': 'Public-Key-Pins-Report-Only', 'reference_url': 'https://tools.ietf.org/html/rfc7469', 'description': 'HTTP Public Key Pinning (HPKP) is a trust on first use security mechanism which protects HTTPS websites from impersonation using fraudulent certificates issued by compromised certificate authorities. The security context or pinset data is supplied by the site or origin.', 'recommendation': 'Deploying Public Key Pinning (PKP) safely will require operational and organizational maturity due to the risk that hosts may make themselves unavailable by pinning to a set of SPKIs that becomes invalid. With care, host operators can greatly reduce the risk of man-in-the-middle (MITM) attacks and other false- authentication problems for their users without incurring undue risk. PKP is meant to be used together with HTTP Strict Transport Security (HSTS) [RFC6797], but it is possible to pin keys without requiring HSTS.'}, {'header_field_name': 'Set-Cookie', 'reference_url': 'https://tools.ietf.org/html/rfc6265#section-8', 'description': "Cookies have a number of security pitfalls. In particular, cookies encourage developers to rely on ambient authority for authentication, often becoming vulnerable to attacks such as cross-site request forgery. Also, when storing session identifiers in cookies, developers often create session fixation vulnerabilities. Transport-layer encryption, such as that employed in HTTPS, is insufficient to prevent a network attacker from obtaining or altering a victim's cookies because the cookie protocol itself has various vulnerabilities. In addition, by default, cookies do not provide confidentiality or integrity from network attackers, even when used in conjunction with HTTPS.", 'recommendation': 'Please at least read these references: https://tools.ietf.org/html/rfc6265#section-8 and https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies.'}, {'header_field_name': 'X-Frame-Options', 'reference_url': 'https://tools.ietf.org/html/rfc7034', 'description': 'The use of "X-Frame-Options" allows a web page from host B to declare that its content (for example, a button, links, text, etc.) must not be displayed in a frame (<frame> or <iframe>) of another page (e.g., from host A). This is done by a policy declared in the HTTP header and enforced by browser implementations.', 'recommendation': ' In 2009 and 2010, many browser vendors ([Microsoft-X-Frame-Options] and [Mozilla-X-Frame-Options]) introduced the use of a non-standard HTTP [RFC2616] header field "X-Frame-Options" to protect against clickjacking. Please check here https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet what\'s the best option for your case.'}, {'header_field_name': 'Access-Control-Allow-Headers', 'reference_url': 'http://www.w3.org/TR/cors/#security', 'description': 'The Access-Control-Allow-Headers header indicates, as part of the response to a preflight request, which header field names can be used during the actual request.', 'recommendation': 'If a header field name is a simple header and is not Content-Type, it is not required to be listed. Content-Type is to be listed as only a subset of its values makes it qualify as simple header. Since the list of headers can be unbounded, simply returning supported headers from Access-Control-Allow-Headers can be enough.'}, {'header_field_name': 'Access-Control-Allow-Methods', 'reference_url': 'http://www.w3.org/TR/cors/#security', 'description': 'The Access-Control-Allow-Methods header indicates, as part of the response to a preflight request, which methods can be used during the actual request.', 'recommendation': 'If a method is a simple method it does not need to be listed, but this is not prohibited. Since the list of methods can be unbounded, simply returning the method indicated by Access-Control-Request-Method (if supported) can be enough.'}, {'header_field_name': 'X-Device-Accept', 'reference_url': 'https://lists.w3.org/Archives/Public/public-bpwg/2009Apr/0023.html', 'description': 'The Accept request-header field can be used to specify certain media\n   types which are acceptable for the response. Accept headers can be\n   used to indicate that the request is specifically limited to a small\n   set of desired types, as in the case of a request for an in-line\n   image', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'X-Device-Accept-Charset', 'reference_url': 'https://lists.w3.org/Archives/Public/public-bpwg/2009Apr/0023.html', 'description': 'The Accept-Charset request-header field can be used to indicate what\n   character sets are acceptable for the response. This field allows\n   clients capable of understanding more comprehensive or special-\n   purpose character sets to signal that capability to a server which is\n   capable of representing documents in those character sets.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'X-Device-Accept-Encoding', 'reference_url': 'https://lists.w3.org/Archives/Public/public-bpwg/2009Apr/0023.html', 'description': 'The Accept-Encoding request-header field is similar to Accept, but\n   restricts the content-codings (section 3.5) that are acceptable in\n   the response.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'X-Device-Accept-Language', 'reference_url': 'https://lists.w3.org/Archives/Public/public-bpwg/2009Apr/0023.html', 'description': 'The Accept-Language request-header field is similar to Accept, but\n   restricts the set of natural languages that are preferred as a\n   response to the request.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'X-Device-User-Agent', 'reference_url': 'No URL provided', 'description': 'The User-Agent request-header field contains information about the\n   user agent originating the request. This is for statistical purposes,\n   the tracing of protocol violations, and automated recognition of user\n   agents for the sake of tailoring responses to avoid particular user\n   agent limitations. User agents SHOULD include this field with\n   requests.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'Frame-Options', 'reference_url': 'https://tools.ietf.org/html/rfc7034', 'description': 'The use of "X-Frame-Options" allows a web page from host B to declare that its content (for example, a button, links, text, etc.) must not be displayed in a frame (<frame> or <iframe>) of another page (e.g., from host A). This is done by a policy declared in the HTTP header and enforced by browser implementations.', 'recommendation': ' In 2009 and 2010, many browser vendors ([Microsoft-X-Frame-Options] and [Mozilla-X-Frame-Options]) introduced the use of a non-standard HTTP [RFC2616] header field "X-Frame-Options" to protect against clickjacking. Please check here https://www.owasp.org/index.php/Clickjacking_Defense_Cheat_Sheet what\'s the best option for your case.'}, {'header_field_name': 'X-XSS-Protection', 'reference_url': 'https://edgewatch.com/kb/x-xss-protection-at-http-headers/', 'description': "This header enables the Cross-site scripting (XSS) filter built into most recent web browsers. It's usually enabled by default anyway, so the role of this header is to re-enable the filter for this particular website if it was disabled by the user. This header is supported in IE 8+, and in Chrome (not sure which versions). The anti-XSS filter was added in Chrome 4. Its unknown if that version honored this header.", 'recommendation': 'Use "X-XSS-Protection: 1; mode=block" whenever is possible (ref. http://blogs.msdn.com/b/ieinternals/archive/2011/01/31/controlling-the-internet-explorer-xss-filter-with-the-x-xss-protection-http-header.aspx).'}, {'header_field_name': 'X-Content-Type-Options', 'reference_url': 'https://www.owasp.org/index.php/List_of_useful_HTTP_headers', 'description': 'The only defined value, "nosniff", prevents Internet Explorer and Google Chrome from MIME-sniffing a response away from the declared content-type. This also applies to Google Chrome, when downloading extensions. This reduces exposure to drive-by download attacks and sites serving user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files.', 'recommendation': 'Always use the only defined value, "nosniff".'}, {'header_field_name': 'Content-Security-Policy', 'reference_url': 'https://www.owasp.org/index.php/List_of_useful_HTTP_headers', 'description': 'Content Security Policy requires careful tuning and precise definition of the policy. If enabled, CSP has significant impact on the way browser renders pages (e.g., inline JavaScript disabled by default and must be explicitly allowed in policy). CSP prevents a wide range of attacks, including Cross-site scripting and other cross-site injections.', 'recommendation': 'Read the reference http://www.w3.org/TR/CSP/ and set according to your case. This is not a easy job.'}, {'header_field_name': 'X-Content-Security-Policy', 'reference_url': 'https://www.owasp.org/index.php/List_of_useful_HTTP_headers', 'description': 'Content Security Policy requires careful tuning and precise definition of the policy. If enabled, CSP has significant impact on the way browser renders pages (e.g., inline JavaScript disabled by default and must be explicitly allowed in policy). CSP prevents a wide range of attacks, including Cross-site scripting and other cross-site injections.', 'recommendation': 'Read the reference http://www.w3.org/TR/CSP/ and set according to your case. This is not a easy job.'}, {'header_field_name': 'X-WebKit-CSP', 'reference_url': 'https://www.owasp.org/index.php/List_of_useful_HTTP_headers', 'description': 'Content Security Policy requires careful tuning and precise definition of the policy. If enabled, CSP has significant impact on the way browser renders pages (e.g., inline JavaScript disabled by default and must be explicitly allowed in policy). CSP prevents a wide range of attacks, including Cross-site scripting and other cross-site injections.', 'recommendation': 'Read the reference http://www.w3.org/TR/CSP/ and set according to your case. This is not a easy job.'}, {'header_field_name': 'Content-Security-Policy-Report-Only', 'reference_url': 'https://www.owasp.org/index.php/List_of_useful_HTTP_headers', 'description': 'Like Content-Security-Policy, but only reports. Useful during implementation, tuning and testing efforts.', 'recommendation': 'Read the reference http://www.w3.org/TR/CSP/ and set according to your case. This is not a easy job.'}, {'header_field_name': 'Sec-Fetch-Mode', 'reference_url': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-Fetch-Mode', 'description': 'The Sec-Fetch-Mode fetch metadata request header indicates the mode of the request.\nBroadly speaking, this allows a server to distinguish between: requests originating from a user navigating between HTML pages, and requests to load images and other resources. For example, this header would contain navigate for top level navigation requests, while no-cors is used for loading an image.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'Permissions-Policy', 'reference_url': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy', 'description': 'The HTTP Permissions-Policy header provides a mechanism to allow and deny the use of browser features in a document or within any <iframe> elements in the document.', 'recommendation': 'No specific recommendation'}, {'header_field_name': 'Referrer-Policy', 'reference_url': 'https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy', 'description': 'The Referrer-Policy HTTP header controls how much referrer information (sent with the Referer header) should be included with requests. Aside from the HTTP header, you can set this policy in HTML.', 'recommendation': 'No specific recommendation'}], 'security_score': 'C', 'csp': None}